name: deployer

on:
  workflow_call:
    inputs:
      application_name:
        required: true
        type: string
      aws_ebs_application_name:
        required: true
        type: string
      aws_ebs_environment_name:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      branch:
        required: true
        type: string
      build_type:
        required: true
        type: string
      commit_sha:
        required: true
        type: string
      github_actor:
        required: true
        type: string
      github_repository:
        required: true
        type: string
      s3_bucket_name:
        required: true
        type: string

env:
  AWS_EBS_APPLICATION_NAME: ${{ inputs.aws_ebs_application_name }}
  AWS_EBS_ENVIRONMENT_NAME: ${{ inputs.aws_ebs_environment_name }}
  AWS_PAGER: ''
  BUILD_DIRECTORY: ./build
  BUILD_TYPE: ${{ inputs.build_type }}
  REMOTE_SCRIPT_DIRECTORY: ./deploy_actions/.github/scripts
  S3_BUCKET_NAME: ${{ inputs.s3_bucket_name }}
  TARGET_BUILD: ref-${{ inputs.commit_sha }}.${{ inputs.build_type }}
  VERSION_LABEL: ver-${{ inputs.commit_sha }}


jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Logging run context
        run: |
          echo "user: ${{ inputs.github_actor }},
          deploying branch: ${{ inputs.branch }},
          to EBS environment: ${{ inputs.aws_ebs_application_name }} [${{ inputs.aws_ebs_environment_name }}]"
      - name: Checking-out scripts
        uses: actions/checkout@v3
        with:
          repository: cicona/deploy_actions
          ref: master
          path: deploy_actions
      - name: Making scripts executable
        run: |
          scripts=( helpers build deploy )
          for script in "${scripts[@]}"
          do
            chmod +x $REMOTE_SCRIPT_DIRECTORY/$script.sh
          done
      - name: Caching scripts
        uses: actions/cache@v3
        with:
          path: deploy_actions
          key: ${{ inputs.commit_sha }}
  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checking-out current branch
        uses: actions/checkout@v3
        with:
          repository: '${{ inputs.github_repository }}'
          ref: '${{ inputs.branch }}'
          token: '${{ secrets.GITHUB_TOKEN }}'
      - name: Reading scripts from cache
        uses: actions/cache@v3
        with:
          path: deploy_actions
          key: ${{ inputs.commit_sha }}
      - name: Configuring ENV
        run: |
          branch_reference=${{ inputs.branch }}
          branch=${branch_reference#refs/heads/}
          branch_normailized=${branch//[^[:alnum:]]/-}
          s3_build_sub_directory=${{ inputs.application_name }}/$branch_normailized
          s3_build_directory=s3://$S3_BUCKET_NAME/$s3_build_sub_directory/
          s3_build_key=$s3_build_sub_directory/$TARGET_BUILD

          echo "S3_BUILD_DIRECTORY=$s3_build_directory" >> $GITHUB_ENV
          echo "S3_BUILD_KEY=$s3_build_key" >> $GITHUB_ENV
      - name: Configuring AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
      - name: Setting-up JDK
        if: inputs.build_type == 'war'
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 8
      - name: Building
        run: |
          $REMOTE_SCRIPT_DIRECTORY/build.sh
          if [ "$?" -ne "0" ]
          then
            exit 1
          fi
      - name: Publishing artifact
        if: success()
        with:
          name: $VERSION_LABEL
          path: $BUILD_DIRECTORY/$TARGET_BUILD
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Reading scripts from cache
        uses: actions/cache@v3
        with:
          path: deploy_actions
          key: ${{ inputs.commit_sha }}
      - name: Configuring AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
      - name: Triggering deploy
        run: |
          $REMOTE_SCRIPT_DIRECTORY/deploy.sh
          if [ "$?" -ne "0" ]
          then
            exit 1
          fi
