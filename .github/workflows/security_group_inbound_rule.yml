name: security_group_inbound_rule

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      ip_address:
        required: true
        type: string
      port:
        required: true
        type: string
      protocol:
        required: true
        type: string
      security_group_id:
        required: true
        type: string

env:
  CACHE_KEY: sgr-${{ inputs.security_group_id }}-${{ github.actor }}
  CACHE_FILE: ./.sgr-${{ inputs.security_group_id }}-${{ github.actor }}
  REMOTE_SCRIPT_DIRECTORY: ./deploy_actions/.github/scripts

jobs:
  whitelist_ip:
    runs-on: ubuntu-latest
    steps:
      - name: Logging run context
        run: |
          echo "user: ${{ github.actor }},
          opening port: ${{ inputs.port }} over protocol: ${{ inputs.protocol }} for IP: ${{ inputs.ip_address }}
          in EC2 Security Group: ${{ inputs.security_group_id }}"
      - name: Checking-out scripts
        uses: actions/checkout@v3
        with:
          repository: cicona/deploy_actions
          ref: master
          path: deploy_actions
      - name: Making scripts executable
        run: |
          for script in $(find $REMOTE_SCRIPT_DIRECTORY -name '*.sh');
          do
            chmod +x $script
          done
      - name: Configuring AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
      - name: Enabling cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_FILE }}
          key: ${{ env.CACHE_KEY }}
      - name: Revoking existing IP
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          source $REMOTE_SCRIPT_DIRECTORY/utils.sh

          security_group_rule_id=$(cat $CACHE_FILE)
          ec2_sg_revoke_ip \
            ${{ inputs.security_group_id }} \
            $security_group_rule_id
      - name: Whitelisting new IP
        id: add_ip
        run: |
          source $REMOTE_SCRIPT_DIRECTORY/utils.sh
          
          security_group_rule_id=$( \
            ec2_sg_whitelist_ip \
              ${{ inputs.security_group_id }} \
              ${{ inputs.protocol }} \
              ${{ inputs.ip_address }} \
              ${{ inputs.port }} \
              "github-${{ github.actor }}" \
          )
          echo "::set-output name=SECURITY_GROUP_RULE_ID::$security_group_rule_id"
      - name: Caching response
        if: contains(steps.add_ip.outputs.SECURITY_GROUP_RULE_ID, 'sgr-')
        run: echo ${{ steps.add_ip.outputs.SECURITY_GROUP_RULE_ID }} > $CACHE_FILE
